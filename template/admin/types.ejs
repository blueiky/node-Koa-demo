<!DOCTYPE html>
<html class="x-admin-sm">

<head>
    <%- include('components/head.ejs') %>
</head>

<body>
    <div class="layui-fluid">
        <div class="layui-row layui-col-space15">
            <div class="layui-col-md12">
                <div class="layui-card">
                    <div class="layui-card-body ">
                        <div class="layui-inline">
                            搜索类型：
                            <div class="layui-inline">
                                <input class="layui-input" name="keyword" id="searchkey" placeholder="请输入搜索关键字"
                                    autocomplete="off">
                            </div>
                            <button class="layui-btn" data-type="reload" id="seachtype"
                                onclick="searchType()">搜索</button>
                            <button type="button" class="layui-btn"
                                onclick="xadmin.open('添加类别','/admin/types_add')">
                                <i class="layui-icon">&#xe608;</i> 添加
                            </button>
                            <button class="layui-btn layui-btn-sm layui-btn-danger" onclick="delMany()"><i
                                    class="layui-icon"></i>
                                删除</button>
                        </div>
                    </div>
                    <div class="layui-card-body ">
                        <table class="layui-hide" id="typelist" lay-filter="typelist"></table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
<script type="text/html" id="barDemo">
    <a class="layui-btn layui-btn-xs" lay-event="edit">编辑</a>
    <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del" >删除</a>    
</script>
<script>
    layui.use('laydate',
        function () {
            var laydate = layui.laydate;

            //执行一个laydate实例
            laydate.render({
                elem: '#start' //指定元素
            });

            //执行一个laydate实例
            laydate.render({
                elem: '#end' //指定元素
            });

        });
</script>
<script>
    var pagesize;
    layui.use('table', function () {
        var table = layui.table;

        table.render({
            elem: '#typelist'
            , url: '/admin/types'
            , title: '电影类型表'
            , method: 'post'
            , done: function (res, curr, count) {
                // 将当前页数重新赋值给全局变量
                pagesize = curr;
            }
            , cols: [[
                { type: 'checkbox', fixed: true },
                , { field: 'tname', title: '类型', width: 120 }
                , { title: '操作', fixed: 'right', align: 'center', minwidth: 130, toolbar: '#barDemo' }
            ]]
            , page: {
                layut: ['limit', 'count', 'prev', 'page', 'next']
                , curr: pagesize
                , groups: 4
                ,
            }
            , response: {
                statusCode: 200 //重新规定成功的状态码为 200，table 组件默认为 0
            }
            , parseData: function (res) { //将原始数据解析成 table 组件所规定的数据
                return {
                    "code": res.status, //解析接口状态
                    "msg": res.message, //解析提示文本
                    "count": res.total, //解析数据长度
                    "data": res.rows.item //解析数据列表
                };
            }
        });
        table.on('tool(typelist)', function (obj) {
            var data = obj.data;
            if (obj.event === 'del') {
                layer.confirm('真的删除行么', function (index) {
                    $.ajax({
                        url: `/admin/deltype/${data.ID}`,
                        success: function (data) {
                            // 提示框确认后关闭
                            var msgdata = JSON.parse(data)
                            if (msgdata.state == 1) {
                                layer.alert(msgdata.msg, {
                                    yes: function () {
                                        layer.closeAll('dialog');
                                        searchType();
                                        pagesize = 1;
                                    }
                                });
                            } else {
                                layer.alert(msgdata.msg, {
                                    yes: function () {
                                        layer.closeAll('dialog');
                                    }
                                })
                            }
                        }
                    })
                });
            } else if (obj.event === 'edit') {
                xadmin.open('编辑', `/admin/types_edit/${data.ID}`, 600, 400)
            }

        });

    });

    // 批量删除
    function delMany() {
        var datas;
        var id = new Array();//声明数组
        layui.use('table', function () {
            var table = layui.table;
            var checkStatus = table.checkStatus('typelist');//声明复选框
            datas = checkStatus.data;
            for (var i in datas) {
                id[i] = datas[i].ID; //得到复选框的值
            }
        });
        if (id.length != 0) {
            layer.confirm(`你确定要删除这个 ${id.length} 条数据吗？`, function () {
                $.ajax({
                    url: `/admin/deltype/${id}`,
                    success: function (data) {
                        // 提示框确认后关闭
                        var msgdata = JSON.parse(data)
                        if (msgdata.state == 1) {
                            layer.alert(msgdata.msg, {
                                yes: function () {
                                    layer.closeAll('dialog');
                                    searchType();
                                    pagesize = 1;
                                }
                            });
                        } else {
                            layer.alert(msgdata.msg, {
                                yes: function () {
                                    layer.closeAll('dialog');
                                }
                            })
                        }
                    }
                });
            });
        } else {
            layer.alert('请选择需要删除的数据')
        }
    }

    function searchType() {
        var searchkey = document.getElementById('searchkey').value
        layui.use('table', function () {
            var table = layui.table;
            table.render({
                elem: '#typelist'
                , url: '/admin/types'
                , title: '电影类型表'
                , method: 'post'
                , done: function (res, curr, count) {
                    // 将当前页数重新赋值给全局变量
                    pagesize = curr;
                }
                , cols: [[
                    { type: 'checkbox', fixed: true },
                    , { field: 'tname', title: '类型', width: 120 }
                    , { title: '操作', fixed: 'right', align: 'center', minwidth: 130, toolbar: '#barDemo' }
                ]]
                , page: {
                    layut: ['limit', 'count', 'prev', 'page', 'next']
                    , curr: pagesize
                    , groups: 4
                    ,
                }
                , page: {
                    layut: ['limit', 'count', 'prev', 'page', 'next']
                    , curr: pagesize    // 设置当前页数
                    , groups: 4
                    ,
                }
                , response: {
                    statusCode: 200 //重新规定成功的状态码为 200，table 组件默认为 0
                }
                , parseData: function (res) { //将原始数据解析成 table 组件所规定的数据
                    return {
                        "code": res.status, //解析接口状态
                        "msg": res.message, //解析提示文本
                        "count": res.total, //解析数据长度
                        "data": res.rows.item //解析数据列表
                    };
                }
            });
        });
    }
</script>
<script>
    var _hmt = _hmt || [];
    (function () {
        var hm = document.createElement("script");
        hm.src = "https://hm.baidu.com/hm.js?b393d153aeb26b46e9431fabaf0f6190";
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(hm, s);
    })();
</script>

</html>